name: CI/CD

on:
  push:
    branches:
      - master
      
jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: 깃허브 레포지토리에서 코드를 워크플로우환경으로 가져오기
        uses: actions/checkout@v3
      
      - name: 빌드위해 Runner에 jdk설치
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin' #벤더사명으로 수정불가
  
      #- name: 그래들캐싱 #실행권한 부여전에 처리
      #  uses: actions/cache@v3
      #  with:
      #    path: |
      #      ~/.gradle/caches
      #      ~/.gradle/wrapper
      #    key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      #    restore-keys: |
      #      ${{ runner.os }}-gradle-

      - name: 도커이미지 빌드 전에 먼저 도커허브에 로그인 진행
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
     
      - name: 현재 EC2로컬에서 실행중인 컨테이너를 확인한 후 포트에 맞는 도커파일로 도커이미지 빌드진행
        run : |            
            echo "-----------------------------------"
            echo "이미지빌드전 exited상태 컨테이너 확인"
            IS_EXITED=$(sudo docker ps -a -f status=exited -q)
            echo "-----------------------------------"
            echo "이미지빌드전 IS_EXITED 값 확인 -> $IS_EXITED"
            echo "-----------------------------------"
            if [ -n "$IS_EXITED" ]; then
             echo "이미지빌드전 exited상태 컨테이너 삭제"            
             sudo docker rm $(sudo docker ps -a -f status=exited -q)
            fi
            echo "-----------------------------------"             
            echo "현재 컨테이너 blue/green 모두 실행중인지 확인 if문조건식에 사용하려면 반드시 -q 옵션을 넣어야한다."
            IS_BLUE_RUN=$(sudo docker ps -f "name=blue" -q)
            IS_GREEN_RUN=$(sudo docker ps -f "name=green" -q)       
            echo "-----------------------------------"
            echo "IS_BLUE_RUN 값확인 -> $IS_BLUE_RUN"
            echo "IS_GREEN_RUN 값확인 -> $IS_GREEN_RUN"
            echo "-----------------------------------"
            if [ -z $IS_BLUE_RUN ] && [ -z $IS_GREEN_RUN ];then
              echo "-----------------------------------"
              echo "blue와 green 컨테이너 모두 동작하지 않기에 blue 컨테이너 8081포트로 이미지 생성한다."
              echo "-----------------------------------"
              echo "폴더이동 ./src/main/resources"
              cd ./src/main/resources
              echo "-----------------------------------"
              echo "파일생성 ./application-real-db.properties"
              echo -e "${{ secrets.APPLICATION_REAL_DB }}" > ./application-real-db.properties
              echo "파일생성 ./application-oauth.properties"
              echo -e "${{ secrets.APPLICATION_OAUTH }}" > ./application-oauth.properties
              echo "-----------------------------------"
              echo "방금만든 파일 존재하는지 확인"
              echo "-----------------------------------"
              ls
              echo "-----------------------------------"
              echo "이동 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026"
              cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
              echo "-----------------------------------"
              echo "docker-compose.yml파일과 nonginx-dogservice-deploy.sh 파일을 ubuntu에 복사시킴 기존 덮어씌운다"
              cp ./docker-compose.yml /home/ubuntu/docker-compose.yml
              cp ./nonginx-dogservice-deploy.sh /home/ubuntu/nonginx-dogservice-deploy.sh
              echo "-----------------------------------"
              echo "위치이동후 그래들 이용한 프로젝트 소스코드 빌드 테스트제외"
              cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
              chmod +x ./gradlew
              ./gradlew clean
              ./gradlew cleanQuerydslSourceDir
              ./gradlew build -x test
              echo "-----------------------------------"
              echo "build폴더 존재하는지 확인"
              echo "-----------------------------------"
              ls
              echo "-----------------------------------"
              echo "jar파일확인"
              cd ./build/libs/
              ls
              echo "-----------------------------------"
              echo "jar실행권한주기"
              chmod +x ./*.jar
              echo "-----------------------------------"          
              echo "jar파일 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 폴더로 이동"
              cp ./*.jar /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 
              echo "-----------------------------------"
              echo "도커파일 위치한 곳으로 디렉토리 이동"
              cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
              echo "-----------------------------------"
              docker build -f ./Dockerfile_8081 -t ${{ secrets.DOCKERHUB_USERNAME }}/dogservice . #dogservice:8081 에서 변경
              docker push ${{ secrets.DOCKERHUB_USERNAME }}/dogservice
      
            elif [ -z $IS_GREEN_RUN ];then
              echo "-----------------------------------"
              echo "blue 컨테이너 동작중이기에 green 8082포트로 이미지 생성한다."
              echo "-----------------------------------"
              echo "폴더이동 ./src/main/resources"
              cd ./src/main/resources
              echo "-----------------------------------"
              echo "파일생성 ./application-real-db.properties"
              echo -e "${{ secrets.APPLICATION_REAL_DB }}" > ./application-real-db.properties
              echo "파일생성 ./application-real-db.properties"
              echo -e "${{ secrets.APPLICATION_OAUTH }}" > ./application-oauth.properties
              echo "-----------------------------------"
              echo "방금만든 파일 존재하는지 확인"
              echo "-----------------------------------"
              ls
              echo "-----------------------------------"
              echo "이동 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026"
              cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
              echo "-----------------------------------"
              echo "docker-compose.yml파일과 nonginx-dogservice-deploy.sh 파일을 ubuntu에 복사시킴 기존 덮어씌운다"
              cp ./docker-compose.yml /home/ubuntu/docker-compose.yml
              cp ./nonginx-dogservice-deploy.sh /home/ubuntu/nonginx-dogservice-deploy.sh
              echo "-----------------------------------"
              echo "위치이동후 그래들 이용한 프로젝트 소스코드 빌드 테스트제외"
              cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
              chmod +x ./gradlew
              ./gradlew cleanQuerydslSourceDir
              ./gradlew build -x test
              echo "-----------------------------------"
              echo "build폴더 존재하는지 확인"
              echo "-----------------------------------"
              ls
              echo "-----------------------------------"
              echo "jar파일확인"
              cd ./build/libs/
              ls
              echo "-----------------------------------"
              echo "jar실행권한주기"
              chmod +x ./*.jar
              echo "-----------------------------------"          
              echo "jar파일 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 폴더로 이동"
              cp ./*.jar /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 
              echo "-----------------------------------"
              echo "도커파일 위치한 곳으로 디렉토리 이동"
              cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
              echo "-----------------------------------"
              docker build -f ./Dockerfile_8082 -t ${{ secrets.DOCKERHUB_USERNAME }}/dogservice . #dogservice:8082에서 변경
              docker push ${{ secrets.DOCKERHUB_USERNAME }}/dogservice
            
            elif [ -z $IS_BLUE_RUN ];then
              echo "-----------------------------------"
              echo "green 컨테이너 동작중이기에 blue 8081포트로 이미지 생성한다."
              echo "-----------------------------------"
              echo "폴더이동 ./src/main/resources"
              cd ./src/main/resources
              echo "-----------------------------------"
              echo "파일생성 ./application-real-db.properties"
              echo -e "${{ secrets.APPLICATION_REAL_DB }}" > ./application-real-db.properties
              echo "파일생성 ./application-real-db.properties"
              echo -e "${{ secrets.APPLICATION_OAUTH }}" > ./application-oauth.properties
              echo "-----------------------------------"
              echo "방금만든 파일 존재하는지 확인"
              echo "-----------------------------------"
              ls
              echo "-----------------------------------"
              echo "이동 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026"
              cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
              echo "-----------------------------------"
              echo "docker-compose.yml파일과 nonginx-dogservice-deploy.sh 파일을 ubuntu에 복사시킴 기존 덮어씌운다"
              cp ./docker-compose.yml /home/ubuntu/docker-compose.yml
              cp ./nonginx-dogservice-deploy.sh /home/ubuntu/nonginx-dogservice-deploy.sh
              echo "-----------------------------------"
              echo "위치이동후 그래들 이용한 프로젝트 소스코드 빌드 테스트제외"
              cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
              chmod +x ./gradlew
              ./gradlew cleanQuerydslSourceDir
              ./gradlew build -x test
              echo "-----------------------------------"
              echo "build폴더 존재하는지 확인"
              echo "-----------------------------------"
              ls
              echo "-----------------------------------"
              echo "jar파일확인"
              cd ./build/libs/
              ls
              echo "-----------------------------------"
              echo "jar실행권한주기"
              chmod +x ./*.jar
              echo "-----------------------------------"          
              echo "jar파일 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 폴더로 이동"
              cp ./*.jar /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 
              echo "-----------------------------------"
              echo "도커파일 위치한 곳으로 디렉토리 이동"
              cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
              echo "-----------------------------------"
              docker build -f ./Dockerfile_8081 -t ${{ secrets.DOCKERHUB_USERNAME }}/dogservice . #dogservice:8081에서 변경
              docker push ${{ secrets.DOCKERHUB_USERNAME }}/dogservice

            else
              echo "-----------------------------------"
              echo "blue/green 컨테이너 모두 동작중이다 service-url.inc파일의 포트확인"
              IS_PORT=$(awk '{print $3}' /etc/nginx/conf.d/service-url.inc | grep 8081)
              echo "-----------------------------------"
              echo "IS_PORT 값 -> $IS_PORT" 
  
              if [ -n $IS_PORT ]; then
                echo "-----------------------------------"
                echo "현재 엑진엑스 8081포트이다. 따라서 포트설정되지 않은 green 8082 컨테이너가 동작하고 있기에 미리 중지시킨다."
                sudo docker-compose stop green
                echo "-----------------------------------"
                echo "폴더이동 ./src/main/resources"
                cd ./src/main/resources
                echo "-----------------------------------"
                echo "파일생성 ./application-real-db.properties"
                echo -e "${{ secrets.APPLICATION_REAL_DB }}" > ./application-real-db.properties
                echo "파일생성 ./application-real-db.properties"
                echo -e "${{ secrets.APPLICATION_OAUTH }}" > ./application-oauth.properties
                echo "-----------------------------------"
                echo "방금만든 파일 존재하는지 확인"
                echo "-----------------------------------"
                ls
                echo "-----------------------------------"
                echo "이동 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026"
                cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
                echo "-----------------------------------"
                echo "docker-compose.yml파일과 nonginx-dogservice-deploy.sh 파일을 ubuntu에 복사시킴 기존 덮어씌운다"
                cp ./docker-compose.yml /home/ubuntu/docker-compose.yml
                cp ./nonginx-dogservice-deploy.sh /home/ubuntu/nonginx-dogservice-deploy.sh
                echo "-----------------------------------"
                echo "위치이동후 그래들 이용한 프로젝트 소스코드 빌드 테스트제외"
                cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
                chmod +x ./gradlew
                ./gradlew cleanQuerydslSourceDir
                ./gradlew build -x test
                echo "-----------------------------------"
                echo "build폴더 존재하는지 확인"
                echo "-----------------------------------"
                ls
                echo "-----------------------------------"
                echo "jar파일확인"
                cd ./build/libs/
                ls
                echo "-----------------------------------"
                echo "jar실행권한주기"
                chmod +x ./*.jar
                echo "-----------------------------------"          
                echo "jar파일 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 폴더로 이동"
                cp ./*.jar /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 
                echo "-----------------------------------"
                echo "도커파일 위치한 곳으로 디렉토리 이동"
                cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
                echo "-----------------------------------"
                docker build -f ./Dockerfile_8082 -t ${{ secrets.DOCKERHUB_USERNAME }}/dogservice . #dogservice:8082에서 변경
                docker push ${{ secrets.DOCKERHUB_USERNAME }}/dogservice
              
              else
                echo "-----------------------------------"
                echo "현재 엑진엑스 8082포트이다. 따라서 포트설정되지 않은 blue 8081 컨테이너가 동작하고 있기에 미리 중지시킨다."
                sudo docker-compose stop blue              
                echo "-----------------------------------"
                echo "폴더이동 ./src/main/resources"
                cd ./src/main/resources
                echo "-----------------------------------"
                echo "파일생성 ./application-real-db.properties"
                echo -e "${{ secrets.APPLICATION_REAL_DB }}" > ./application-real-db.properties
                echo "파일생성 ./application-real-db.properties"
                echo -e "${{ secrets.APPLICATION_OAUTH }}" > ./application-oauth.properties
                echo "-----------------------------------"
                echo "방금만든 파일 존재하는지 확인"
                echo "-----------------------------------"
                ls
                echo "-----------------------------------"
                echo "이동 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026"
                cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
                echo "-----------------------------------"
                echo "docker-compose.yml파일과 nonginx-dogservice-deploy.sh 파일을 ubuntu에 복사시킴 기존 덮어씌운다"
                cp ./docker-compose.yml /home/ubuntu/docker-compose.yml
                cp ./nonginx-dogservice-deploy.sh /home/ubuntu/nonginx-dogservice-deploy.sh
                echo "-----------------------------------"
                echo "위치이동후 그래들 이용한 프로젝트 소스코드 빌드 테스트제외"
                cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
                chmod +x ./gradlew
                ./gradlew cleanQuerydslSourceDir
                ./gradlew build -x test
                echo "-----------------------------------"
                echo "build폴더 존재하는지 확인"
                echo "-----------------------------------"
                ls
                echo "-----------------------------------"
                echo "jar파일확인"
                cd ./build/libs/
                ls
                echo "-----------------------------------"
                echo "jar실행권한주기"
                chmod +x ./*.jar
                echo "-----------------------------------"          
                echo "jar파일 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 폴더로 이동"
                cp ./*.jar /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 
                echo "-----------------------------------"
                echo "도커파일 위치한 곳으로 디렉토리 이동"
                cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
                echo "-----------------------------------"
                docker build -f ./Dockerfile_8081 -t ${{ secrets.DOCKERHUB_USERNAME }}/dogservice . #dogservice:8081에서 변경
                docker push ${{ secrets.DOCKERHUB_USERNAME }}/dogservice
              fi #green/blue 컨테이너 둘다 동작중일때 엔진엑스포트설정을 보고 포트지정안된 컨테이너 중지시키고 그컨테이너포트로 다시 이미지생성
              
            fi
          
      #- name: 그래들에 실행권한한부여 + .jar빌드전 추가파일생성 + 그래들을 통한 프로젝트빌드 테스트는 제외 + 
      #  run: |
      #    echo "-----------------------------------"        
      #    chmod +x ./gradlew
          
          #echo "현재위치확인"
          #pwd
          #echo "-----------------------------------"
          #echo "현재위치에 존재하는 파일들 목록"
          #ls
       #   echo "-----------------------------------"
       #   echo "폴더이동 ./src/main/resources"
       #   cd ./src/main/resources
       #   echo "-----------------------------------"
       #   echo "파일생성 ./application-real-db.properties"
       #   echo -e "${{ secrets.APPLICATION_REAL_DB }}" > ./application-real-db.properties
       #   echo "파일생성 ./application-real-db.properties"
       #   echo -e "${{ secrets.APPLICATION_OAUTH }}" > ./application-oauth.properties
       #   echo "-----------------------------------"
       #   echo "방금만든 파일 존재하는지 확인"
       #   echo "-----------------------------------"
       #   ls
       #   echo "-----------------------------------"
       #   echo "이동 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026"
       #   cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
       #   echo "-----------------------------------"
       #   echo "docker-compose.yml파일과 nonginx-dogservice-deploy.sh 파일을 ubuntu에 복사시킴"
       #   cp ./docker-compose.yml /home/ubuntu/docker-compose.yml
       #   cp ./nonginx-dogservice-deploy.sh /home/ubuntu/nonginx-dogservice-deploy.sh
       #   echo "-----------------------------------"
       #   echo "위치이동후 그래들 이용한 프로젝트 소스코드 빌드 테스트제외"
       #   cd /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026
       #   chmod +x ./gradlew
       #   ./gradlew cleanQuerydslSourceDir
       #   ./gradlew build -x test
       #   echo "-----------------------------------"
       #   echo "build폴더 존재하는지 확인"
       #   echo "-----------------------------------"
       #   ls
       #   echo "-----------------------------------"
       #   echo "jar파일확인"
       #   cd ./build/libs/
       #   ls
       #   echo "-----------------------------------"
       #   echo "jar실행권한주기"
       #   chmod +x ./*.jar
       #   echo "-----------------------------------"          
       #   echo "jar파일 /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 폴더로 이동"
       #   cp ./*.jar /home/ubuntu/actions-runner/_work/newspringboot231026/newspringboot231026 
       #   echo "-----------------------------------"
          
     
      #- name: 도커파일 이용해서 이미지빌드
      #  run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/dogservice .
      
      #- name: 도커허브로그인
      #  uses: docker/login-action@v2
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_PASSWORD }}
     
      #- name: 도커허브에 이미지 push
      #  run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/dogservice
      
    
  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: 깃허브 레포지토리에서 코드를 워크플로우환경으로 가져오(앞의 job과 별개의 환경이기에 체크아웃이 또 필요하다)
        uses: actions/checkout@v3      

      #- name: 다른 job에서 이전 job에서 만든 파일 그대로 있는지 확인
      #  run: |
      #    echo "-----------------------------------"
      #    echo "현재위치 출력"
      #    pwd
      #    echo "-----------------------------------"
      #    echo "현재위치에 존재하는 파일목록 출력"
      #    ls -a
      #    echo "-----------------------------------"
      #    echo "폴더 이동 ./src/main/resources 후 목록 출력 이전 job에서 만든 properties파일 존재하는지 확인"
      #    cd ./src/main/resources
      #    ls -a
          
      #- name: properties외부파일 Runner에서 secrets이용해서 생성 
      #  run: |
      #    mkdir ~/app
      #    echo "${{ secrets.APPLICATION_OAUTH.PROPERTIES }}" >> ~/app/application-oauth.properties
      #    echo "${{ secrets.APPLICATION_REAL_DB.PROPERTIES }}" >> ~/app/application-real-db.properties
          
          
      #- name: Runner에서 docker-compose.yml파일 EC2로컬로 전달
      #  uses: appleboy/scp-action@v0.0.10
      #  with:
      #    host: ${{ secrets.EC2_HOST }}
      #    username: ubuntu
      #    key: ${{ secrets.SSH_KEY }}
      #    port: 22
      #    overwrite: true
      #    source: "./app"
      #    target: "/home/ubuntu"
      #    debug: true

      - name: pull을 위한 도커허브로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

          
      - name: 실행 중인 컨테이너 확인후 엔진엑스 포트포워딩 후 리로드하는 무중단배포진행
        #uses: appleboy/ssh-action@master
        #with:
          #host: ${{ secrets.EC2_HOST }}
          #username: ubuntu
          #key: ${{ secrets.SSH_KEY }} 
          #port: 22
        run: |
             echo "-----------------------------------"
             echo "현재위치 확인"
             pwd
             echo "-----------------------------------"
             echo "/home/ubuntu 로 이동하자 여기에 도커컴포즈와 .sh 스크립트 존재하기에"
             cd ~/
             pwd
             
             #echo "-----------------------------------"
             #echo "도커허브에서 새버전 이미지 pull하기"
             #sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/dogservice:latest
             #echo "-----------------------------------"
             #echo "엔진엑스 실행중인지 확인"
             #IS_NGINX=$(sudo docker ps | grep nginx)
             #echo "------------------------------------"
             #echo "IS_NGINX의 값 -> $IS_NGINX"
             #echo "------------------------------------"
             #if [ -z "$IS_NGINX" ]; then
               #echo "현재 엔진엑스 실행안되고 있기에 실행시킨다."
               #sudo docker run -d --name nginx -p 80:8080 -v ~/nginx.conf:/etc/nginx/nginx.conf -v ~/conf.d:/etc/nginx/conf.d nginx
             #fi  
             
             echo "-----------------------------------"
             echo "새버전 배포전 exited상태 컨테이너 확인"
             IS_EXITED=$(sudo docker ps -a -f status=exited -q)
             echo "-----------------------------------"
             echo "IS_EXITED 값 확인 -> $IS_EXITED"
             echo "-----------------------------------"
             if [ -n "$IS_EXITED" ]; then
               echo "새버전 배포전 exited상태 컨테이너 삭제"            
               sudo docker rm $(sudo docker ps -a -f status=exited -q)
             fi
             echo "-----------------------------------"             
             echo "현재 컨테이너 blue/green 모두 실행중인지 확인 if문조건식에 사용하려면 반드시 -q 옵션을 넣어야한다."
             IS_BLUE_RUN=$(sudo docker ps -f "name=blue" -q)
             IS_GREEN_RUN=$(sudo docker ps -f "name=green" -q)       
             echo "-----------------------------------"
             echo "IS_BLUE_RUN -> $IS_BLUE_RUN"
             echo "IS_GREEN_RUN -> $IS_GREEN_RUN"
             echo "-----------------------------------"
             
             if [ -z "$IS_BLUE_RUN" ] && [ -z "$IS_GREEN_RUN" ]; then
               echo "현재 blue/green 컨테이너 모두 동작하지 않고있음 -> 8081 blue컨테이너만 실행시작"
               sudo docker-compose up -d blue
               #sudo docker-compose up -d --build blue
               sleep 5
               
               #while [ 1 = 1 ]; do
                   echo "-------------------------------------------------------"
                   echo "새버전을 blue 컨테이너에서 실행시키고 상태체크중"                   
                   PRESENT_PORT=$(awk '{print $3}' /etc/nginx/conf.d/service-url.inc | cut -c 18-21) 
                   echo "-------------------------------------------------------"
                   echo "현재 엑진엑스 포트 확인 -> $PRESENT_PORT"
                   echo "-------------------------------------------------------" 
                   IP_BLUE=$(sudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' blue)
                   echo "-------------------------------------------------------"
                   echo "새버전 blue 컨테이너 IP얻기 ->  $IP_BLUE"
                   #REQUEST=$(curl http://0.0.0.0:8081/) 에러남
                   #3.39.29.255 -k -X GET
                   #REQUEST=$(curl -k -X GET 'http://127.0.0.1:8081')
                   #REQUEST=$(curl http://127.0.0.1:8081/)
                   #REQUEST=$(curl http://3.39.29.255:8081) 
                   #REQUEST=$(curl http://localhost:8081/) 이거도 에러
                   #REQUEST=$(curl http://$IP_BLUE:8081/) 연결거부뜨네
                   REQUEST=$(nc -vz 127.0.0.1 8081)
                   
                   echo "-------------------------------------------------------"
                   echo "새버전을 blue 컨테이너실행 후 curl 확인-> $REQUEST "

                   #if [ -n "$REQUEST" ]; then
                     echo "-------------------------------------------------------"
                     echo "blue 컨테이너 동작확인 완료 엔진엑스 포트변경 "
                     #echo " blue컨테이너 curl 확인불가능하다 엔진엑스 8081로 포트포워딩 후 리로드시킴 "
                     sudo sed -i "s/8082/8081/g" /etc/nginx/conf.d/service-url.inc  
                     sudo service nginx reload
                     
                   #  break;
                   #else
                   #  echo "-------------------------------------------------------"
                   #  echo "blue 컨테이너 응답없기에 현재 blue green 모두 컨테이너 실행하지 않는 상태로 둔다."
                   #  break;
                   #fi
                 #done; 
             
             else
               #echo "현재 blue/green 컨테이너중 1개라도 동작중이므로 새버전 배포를 위한 무중단 자동배포파일 실행시킴"
               #echo "-----------------------------------"
               #chmod +x /home/ubuntu/nonginx-dogservice-deploy.sh && sh /home/ubuntu/nonginx-dogservice-deploy.sh > /home/ubuntu/nonginx-deploy.log 2>&1 
               echo "-----------------------------------" 
               echo "현재 blue/green 컨테이너 중 1개라도 동작중이다. 어떤 컨테이너 동작중인지 확인"
               #IS_GREEN=$(sudo docker ps | grep green) 이게 왜에러가 나는지..
               
               PRESENT_PORT=$(awk '{print $3}' /etc/nginx/conf.d/service-url.inc | cut -c 18-21) #127. 시작시 18-21 /공인IP는 20-23
               #IS_GREEN=$(sudo docker ps -a -f name=green -q)
             
               echo "----------------------------------------------------------"
               #echo "IS_GREEN 변수값 -> $IS_GREEN"
               echo "PRESENT_PORT 변수값  -> $PRESENT_PORT"
               
               if [ $PRESENT_PORT -eq 8081 ]; then 
                 echo "-------------------------------------------------------"
                 echo "현재포트가 8081를 가리키고 있기에 blue컨테이너 동작중 -> 기존 green 운영되고 있다면 종료하고 다시 green컨테이너에 새로운 버전 배포필요"
                 echo "-------------------------------------------------------"
                 sudo docker-compose stop green
                 sleep 2
                 IS_EXITED=$(sudo docker ps -a -f status=exited -q)
                 echo "-------------------------------------------------------"
                 echo "IS_EXITED 값확인 -> $IS_EXITED "
                 
                 if [ -n "$IS_EXITED" ]; then
                   echo "-------------------------------------------------------"
                   echo "exited 된 컨테이너 확인 -> $IS_EXITED 종료시킴 "
                   sudo docker rm $(sudo docker ps -a -f status=exited -q)
                 fi
                 
                 echo "새버전 green컨테이너 실행시킴"
                 #sudo docker-compose up -d --build green 
                 sudo docker-compose up -d green
                 sleep 5
                 
                 #while [ 1 = 1 ]; do
                   echo "-------------------------------------------------------"
                   echo "새버전 green 컨테이너 상태체크중"
                   
                   IP_GREEN=$(sudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' green)
                   echo "-------------------------------------------------------"
                   echo "새버전 green 컨테이너 IP얻기 ->  $IP_GREEN"
                   #GREEN_REQUEST=$(curl http://0.0.0.0:8082/) 에러남
                   #3.39.29.255 -k -X GET
                   #GREEN_REQUEST=$(curl -k -X GET 'http://127.0.0.1:8082/') 
                   #GREEN_REQUEST=$(curl http://127.0.0.1:8082/)
                   #GREEN_REQUEST=$(curl http://3.39.29.255:8082)
                   #GREEN_REQUEST=$(curl http://localhost:8082/) 이거도 에러
                   #GREEN_REQUEST=$(curl http://$IP_GREEN:8082/) 연결거부뜨네
                   GREEN_REQUEST=$(nc -vz 127.0.0.1 8082) 
                   
                   echo "-------------------------------------------------------"
                   echo "새버전 green컨테이너실행 후8082 포트 확인 -> $GREEN_REQUEST "
                   #echo "새버전 green컨테이너실행 후8082 포트 확인 curl 안되기에 바로 기존 blue 컨테이너 종료 "
                   
                   if [ -n "$GREEN_REQUEST" ]; then
                     echo "-------------------------------------------------------"
                     echo "새버전 컨테이너 curl 확인되었기에 기존 blue 버전 컨테이너는 stop시킨다."
                     sudo docker-compose stop blue
                   fi
                   
                   #sleep 3
                   #echo "종료된 컨테이너 삭제처리위해 찾는다 컨테이너 ID추출한다."
                   #IS_EXITED=$(sudo docker ps -a -f status=exited -q)
                   #echo "-------------------------------------------------------"
                   #echo "IS_EXITED 값확인 -> $IS_EXITED "
                 
                   #if [ -n "$IS_EXITED" ]; then
                   #  echo "-------------------------------------------------------"
                   #  echo "exited 된 컨테이너 확인 -> $IS_EXITED 종료시킴 "
                   #  sudo docker rm $(sudo docker ps -a -f status=exited -q)
                   #fi
                   
                   echo "-------------------------------------------------------"
                   echo "엔진엑스 포트포워딩 8082로 수정하고 리로딩시킴 "
                   sudo sed -i "s/8081/8082/g" /etc/nginx/conf.d/service-url.inc  
                   sudo service nginx reload 
                   sudo docker-compose stop blue
                   
                   #if [ -n "$GREEN_REQUEST" ]; then 
                   #  echo "-------------------------------------------------------"
                   #  echo "새버전 green 컨테이너 동작확인 완료 blue컨테이너 중지"
                   #  sudo docker-compose stop blue
                   #  sudo docker rm $(sudo docker ps -a -f status=exited -q)
                   #  sudo sed -i "s/8081/8082/g" /etc/nginx/conf.d/service-url.inc  
                   #  sudo service nginx reload
                   #  break;
                   #else
                   #  echo "-------------------------------------------------------"
                   #  echo "새버전 green컨테이너 응답없기에 구 버전인 blue컨테이너로 운영"
                   #  break;
                   #fi
                 #done;
               
               elif [ $PRESENT_PORT -eq 8082 ]; then
                 echo "-------------------------------------------------------"
                 echo "현재 포트가 8082이므로 green컨테이너 동작중 -> blue 실행중이라면 종료하고 blue컨테이너에 새로운 버전 배포필요"
                 echo "-------------------------------------------------------"
                 sudo docker-compose stop blue
                 sleep 2
                 IS_EXITED=$(sudo docker ps -a -f status=exited -q)
                 echo "-------------------------------------------------------"
                 echo "IS_EXITED 값확인 -> $IS_EXITED "
                 
                 if [ -n "$IS_EXITED" ]; then
                   echo "-------------------------------------------------------"
                   echo "exited 된 컨테이너 확인 -> $IS_EXITED 종료시킴 "
                   sudo docker rm $(sudo docker ps -a -f status=exited -q)
                 fi
                 
                 #sudo docker rm $(sudo docker ps -a -f status=exited -q)
                 echo "-------------------------------------------------------"
                 echo "blue컨테이너 실행시킴"
                 #sudo docker-compose up -d --build blue 
                 sudo docker-compose up -d blue
                 sleep 5
                 
                 #while [ 1 = 1 ]; do
                   echo "-------------------------------------------------------"
                   echo "새버전 blue 컨테이너 상태체크중"
                   
                   IP_BLUE=$(sudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' blue)
                   echo "-------------------------------------------------------"
                   echo "새버전 blue 컨테이너 IP얻기 ->  $IP_BLUE"
                   #BLUE_REQUEST=$(curl http://0.0.0.0:8081/) 에러남
                   #BLUE_REQUEST=$(curl -k -X GET 'http://127.0.0.1:8081/') 
                   #BLUE_REQUEST=$(curl http://127.0.0.1:8081/)
                   #BLUE_REQUEST=$(curl http://3.39.29.255:8081)
                   #BLUE_REQUEST=$(curl http://localhost:8081/) 이거에러
                   #BLUE_REQUEST=$(curl http://$IP_BLUE:8081/) 연결거부
                   BLUE_REQUEST=$(nc -vz 127.0.0.1 8081) 
                   
                   #3.39.29.255 -k -X GET
                   echo "-------------------------------------------------------"
                   echo "새버전 blue컨테이너실행 후8081 포트 확인 -> $BLUE_REQUEST "
                   if [ -n "$BLUE_REQUEST" ]; then
                     echo "-------------------------------------------------------"
                     echo "새버전 blue 컨테이너 동작확인 완료되었기에 기존 green컨테이너 중지시킨다."
                   
                     #echo "새버전 blue컨테이너실행 후8081 포트 확인 curl 안되기에 바로 기존 green 컨테이너 종료 "
                     sudo docker-compose stop green
                   fi
                   #sleep 3
                   #IS_EXITED=$(sudo docker ps -a -f status=exited -q)
                   #echo "-------------------------------------------------------"
                   #echo "IS_EXITED 값확인 -> $IS_EXITED "
                 
                   #if [ -n "$IS_EXITED" ]; then
                   #  echo "-------------------------------------------------------"
                   #  echo "exited 된 컨테이너 확인 -> $IS_EXITED 종료시킴 "
                   #  sudo docker rm $(sudo docker ps -a -f status=exited -q)
                   #fi
                   
                   echo "-------------------------------------------------------"
                   echo "엔진엑스 포트포워딩 8081로 수정하고 리로딩시킴 "
                   sudo sed -i "s/8082/8081/g" /etc/nginx/conf.d/service-url.inc  
                   sudo service nginx reload 
                   sudo docker-compose stop green
                   
                   #if [ -n "$BLUE_REQUEST" ]; then 
                     #echo "-------------------------------------------------------"
                     #echo "새버전 blue 컨테이너 동작확인 완료 green컨테이너 중지"
                     #sudo docker-compose stop green
                     #sudo docker rm $(sudo docker ps -a -f status=exited -q)
                     #sudo sed -i "s/8082/8081/g" /etc/nginx/conf.d/service-url.inc  
                     #sudo service nginx reload
                    # break;
                   #else
                   #  echo "-------------------------------------------------------"
                   #  echo "새버전 blue 컨테이너 응답없기에 구 버전인 green 컨테이너로 운영"
                   #  break;
                   #fi
                 #done;
               else
                 echo "PRESENT_PORT 값이 8081도 8082도 아니기에 아무것도 하지 않고 현재 상태 그대로 둔다"
               fi
             fi 
                 
      #- name: EC로컬에서 dogservice_deploy.sh파일실행
      #  uses: appleboy/ssh-action@master
      #  with:
      #    username: ubuntu
      #    host: ${{ secrets.EC2_HOST }}
      #    key: ${{ secrets.SSH_KEY }}
      #    port: 22
      #    script: chmod +x /home/ubuntu/dogservice_deploy.sh && sh /home/ubuntu/dogservice_deploy.sh
